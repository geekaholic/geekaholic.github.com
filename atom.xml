<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Geekaholic adventures]]></title>
  <link href="http://geekaholic.github.com/atom.xml" rel="self"/>
  <link href="http://geekaholic.github.com/"/>
  <updated>2014-06-16T10:31:21-05:00</updated>
  <id>http://geekaholic.github.com/</id>
  <author>
    <name><![CDATA[Bud]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why We Started ZoomBA]]></title>
    <link href="http://geekaholic.github.com/blog/2012/05/30/starting-zoomba/"/>
    <updated>2012-05-30T16:20:00-05:00</updated>
    <id>http://geekaholic.github.com/blog/2012/05/30/starting-zoomba</id>
    <content type="html"><![CDATA[<p>Those who follow me on social media might have seen me go on about this &ldquo;ZoomBA&rdquo; thing and may have some idea about it. For others, in short, it&rsquo;s our own Cloud <a href="http://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a> meant for Small Businesses (or SMEs as it is called elsewhere). But I thought of sharing the story of ZoomBA (which at this point sounds more like an African folk tale)r. Though we started working on ZoomBA earlier this year, the whole concept actually began quite a while back.</p>

<p>Once upon a time,  in December 2004, <a href="http://sanjiva.weerawarana.org">Sanjiva</a> rang me up on an idea of building an &ldquo;Out of the box&rdquo; appliance for Small Businesses out in the US. By his estimates, majority of them did not have a drop in IT solution which worked. Being a FOSS advocate myself and trying to drive Linux adoption, I immediately connected with the idea of making an IT system that worked for a Small Business. But I wasn&rsquo;t ready to start a company just then and had already committed to <a href="http://www.virtusa.com">join another company</a>, so it had to wait!</p>

<p>Finally in late 2005, myself and <a href="https://www.facebook.com/lakmal.warusawithana">Lakmal</a> teamed up for the challenge. We didn&rsquo;t have much startup capital and so incubated our project along side <a href="htt://wso2.com">Sanjiva&rsquo;s other company</a>. After a bit of brainstorming we came up with the name THINKCube for the company and the tagline &ldquo;Out of the box solutions in a box&rdquo; (<a href="http://shahani-w.blogspot.com/">Shahani</a> was the inspiration for it). Company setup aside, we really started focusing on the key question of &ldquo;What does it take for a Small Businesses to run their IT system and what&rsquo;s preventing them from doing it&rdquo;.</p>

<p>Without going into the details, I will simply state that we realized a lot of Small Businesses didn&rsquo;t want the hassle of hiring an IT department only to loose control to the IT guy. Instead they were very focused on growing their business and IT is seen as something that would be nice to have but not worth the trouble.</p>

<p>thinkCube&rsquo;s go to market exercise was an interesting learning experience. Like most startups, we had to go through a lot of experimentation in figuring out the product&rsquo;s technology and look &amp; feel. The other challenge was how best to put it in front of our end user. First we tried to build a hardware appliance but later realized that we weren&rsquo;t really equipped to handle the logistics of moving devices around the globe. So we turned to virtualization by creating <a href="https://solutionexchange.vmware.com/store/category_groups/19">VMWare bottles</a> of the product and then <a href="http://ieeexplore.ieee.org/xpl/articleDetails.jsp?reload=true&amp;arnumber=5745841">multi-tenant virtualization</a> running on a Telco&rsquo;s <a href="http://en.wikipedia.org/wiki/Cloud_computing#Infrastructure_as_a_service_.28IaaS.29">Cloud Infrastructure</a>. In the same manner we did several UI iterations before settling down on our current dynamic shell which offers SAML based SSO, fun dashboard widgets and context sensitive end-to-end help. (You can read more about it on the <a href="http://zoombacloud.com/blog/2012/05/zoomba-cloud-launched/">ZoomBA blog.</a>)</p>

<p>So thats how ZoomBA came about. It&rsquo;s our attempt to really address the core issues that prevent Cloud SaaS adoption among Small Businesses. While I know we haven&rsquo;t addressed all the issues, I am confident we have addressed some of the most fundamental ones.</p>

<p>The journey so far from the inception of thinkCube to us brainstorming, arguing, building, abandoning, rebuilding has been such a reward. I hope our hard efforts will come through when users finally get their hands on the system once we start sending invites out soon! In the mine time, if you know anyone who could benefit from a service like ZoomBA, please <a href="http://facebook.com/zoombacloud">spread the news</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Peer-to-Peer Collaborative Development Using GIT]]></title>
    <link href="http://geekaholic.github.com/blog/2012/05/14/git-on-p2p-development/"/>
    <updated>2012-05-14T09:20:00-05:00</updated>
    <id>http://geekaholic.github.com/blog/2012/05/14/git-on-p2p-development</id>
    <content type="html"><![CDATA[<p>Wow how time flies when you&rsquo;re having fun! I first thought of writing this post back in January, when I was on a roll with writing blog posts. But it never materialized beyond notes I collected in preparation. Come several months later with a lot more experience on what I am about to tell you, and you have this post. The notes I&rsquo;m reffering to is about a development style that came about as a result of optimizing, how we at <a href="http://thinkcube.com">thinkCube</a> organize and work with source code in a <a href="http://en.wikipedia.org/wiki/Revision_control">revision control system</a>. Considering the wide use of such systems such as SVN and GIT, I thought I&rsquo;d share our development experience in the hope it will help you to take another look at your own development style. But before I get into it, I&rsquo;d like very briefly touch on some background on the evolution of development styles around version control systems.</p>

<h2>Thou shalt not commit, Yet!</h2>

<p>Back in the days of <a href="http://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>, source code lived centrally on a server called a repository. One had to earn the right to read/write to this repository in order to ensure &ldquo;world order&rdquo; (others had to submit a patch via <a href="http://bugzilla.org">Bugzilla</a>). While this led to a centrally managed system of Collaborative software development, it also created a new software development style of &ldquo;Earn your commitership&rdquo;, &ldquo;Commit often&rdquo; and &ldquo;Communicate often&rdquo;. Nothing much changed when everyone moved over to <a href="http://subversion.apache.org">SVN</a>, which started out as an improved CVS. This development style didn&rsquo;t go down well with Linus Torvalds for his Linux work and so he created GIT instead and <a href="http://www.youtube.com/watch?v=4XpnKHJAok8">hates CVS/SVN</a>.</p>

<h2>Pray-Pull-Push style of development</h2>

<p>We started with CVS back in 2005 and then SVN for managing our development at thinkCube. A little while after git came along when it was stable enough to use and also was usuable by mere mortals, we made the switch. At first we had some trouble wrapping our heads around git and so just used it like SVN where we used to always do <code>commit/pull/push</code> operations as if they were atomic. But after about a week or two, we realized the power of git was in its ability to let you commit locally and push when you were ready to share. And so, yet another development style arose where git acted as a Collaborative Whiteboard for sharing code changes. This also meant developers needed push access to the central repository in the same manner commit access was required with SVN/CVS.</p>

<p>The unfortunate development style this results in is that developers may occasionally push unfinished worked upstream just to share it with the &ldquo;Developer next door&rdquo;. The consequence of that maybe felt by the poor developer that spent all night working on a feature, pulls in oder to push to find that his code now conflicts for no apparent reason!</p>

<p>Now I know a lot of you may be on this style of development and thinking, &ldquo;If our developers do that, we punish them!&rdquo; and so they don&rsquo;t! Good for you! But my take on this is, if the system is fundamentally broken then it&rsquo;s better to fix it than to enforce tough rules. For example, if I may digress for a bit, &ldquo;Why are <a href="http://en.wikipedia.org/wiki/Auto_rickshaw">TukTuk</a> drivers and Motor Cyclist so careless?&rdquo;. Is it likely that only careless drivers pick up these vehicles or is it more likely the vehicle made them reckless? My advice is if the tool is broken, then fix it! (and ban TukTuks :)</p>

<p>Therefore last year we decided to adopt our current style of development which is as follows.</p>

<h2>Fetch-Merge-Push style of development</h2>

<p><a href="http://en.wikipedia.org/wiki/Yan_Can_Cook">If Linus can do it, then so can you!</a> We didn&rsquo;t invent this stuff but we did adapt it in a manner which scales for us. The idea is simple, stop devs from committing upstream as a means of sharing changes but instead get them to share peer to peer by fetching from each other. Our git repos are setup so that everyone has read access to clone the repo but only a couple of devs (usually just one dev) can push to a given repo. That means the dev who has push access usually will not need to <code>pull</code> prior to pushing because no one else can change it. This is what git was designed to do and yet it&rsquo;s probably one of the least used features among git converts.</p>

<p>Ok so lets get technical shall we?</p>

<p>First off, I&rsquo;m assuming you know git basics and are already using it. If not then <a href="http://digit.lk/09_dec_git">checkout my git article on Digit</a></p>

<h2>Sharing your repo</h2>

<p>Let&rsquo;s look at how you can share your git repo with another P2P style. Suppose you have a repo as follows:</p>

<blockquote><p>/home/bud/repos/awesome.repo</p></blockquote>

<p>You can easily share your awesome.repo with anyone on the local networking using git-daemon command by first cd-ing to it&rsquo;s parent directory.</p>

<pre><code>$ cd /home/bud/repos
$ git daemon --export-all --base-path=.
</code></pre>

<p>The above will share all your git repos under the current directory as read-only for others in the network to fetch. Git daemon will run in the foreground by default and so once you&rsquo;re done sharing you can just Ctrl+C it.</p>

<h2>Fetching a shared repo</h2>

<p>In order to fetch from a fellow dev, you will first need to add him/her as a remote. Chances are you cloned the project from upstream in which case you have just one default remote called origin which points to your upstream repo.</p>

<blockquote><p>To add another remote for your friend joe for example</p></blockquote>

<pre><code>$ cd /home/bud/repos/awesome.repo
$ git remote add joe git://joes-computer.local/awesome.repo
</code></pre>

<p>From within your repo, you add a remote using the git remote command. The url above uses git&rsquo;s special <code>git://</code> protocol that is understood by the git-daemon, while I&rsquo;m relying on <a href="http://en.wikipedia.org/wiki/Multicast_DNS">mDNS</a> to resolve joes-computer.local automatically. If your network(or OS) doesn&rsquo;t support this, then you can just use the IP address.</p>

<blockquote><p>Finally to fetch joe&rsquo;s changes over the network to your machine issue:</p></blockquote>

<pre><code>$ git fetch joe
</code></pre>

<p>The above command should give you some feedback as to the success of the fetch operation. Remember that fetch is safe since it only &ldquo;fetches&rdquo; as opposed to <code>pull</code> which fetches and then tries to merge. So while you could&rsquo;ve used <code>pull</code> instead of <code>fetch</code>, I wouldn&rsquo;t recommend it!</p>

<h2>Merging and deleting</h2>

<p>Now that you have a copy of the remote changes, what you&rsquo;d want to do next is to see which branches they were working on. Usually joe will tell you, hey my latest changes are on the <code>new-cool-feature</code> branch.</p>

<pre><code>$ git branch -a
* master
experimental
remotes/joe/master
remotes/joe/new-cool-feature
</code></pre>

<p>Git branch will first show your local branches (master, experimental) followed by the remote ones. At this point you should checkout a remote branch you&rsquo;re planning to merge and just make sure everything is working.</p>

<pre><code>$ git checkout -b joes-new-cool-feature remotes/joe/new-cool-feature
</code></pre>

<p>This creates a local branch called &ldquo;joes-new-cool-feature&rdquo; which tracks the remote branch <code>remotes/joe/new-cool-feature</code> and switches the current HEAD to it. Once your happy then you can switch back to master and merge.</p>

<pre><code>$ git checkout master
$ git merge joes-new-cool-feature
</code></pre>

<p>But&hellip; if you have any merge conflicts then you will have to resolve it! If you don&rsquo;t then your master will remain in a state of CONFLICT. If that sounds like additional work, then do what I do instead of above.</p>

<pre><code>$ git checkout master
$ git checkout -b master-merge-joes-new-cool-feature
$ git merge joes-new-cool-feature
$ git checkout master
$ git merge master-merge-joes-new-cool-feature
$ git branch -d master-merge-joes-new-cool-feature
</code></pre>

<p>Wow that&rsquo;s a handful of commands to type, you say. Trust me, it beats wasting time trying to resolve someone elses conflict! In above, we fork master as <code>master-merge-joes-new-cool-feature</code> in anticipation of a bumpy merge. If things go right, we then merge the merged to master :) The last line is just to delete the temporary branch which we no longer need.</p>

<p>Of course, as you go back and forth merging these micro commits with a dev, you will get into a comfort zone of realizing things won&rsquo;t go wrong in which case you could merge the remote directly.</p>

<pre><code>$ git merge remotes/joe/new-cool-feature
</code></pre>

<p>It all depends on how much you trust the other dev :) and how much of merge conflict resolution you&rsquo;re prepared to take on. The branching approach is safer and if you&rsquo;re the BOSS and you have a merge conflict you can simply abandon the branch and ask your peer dev to fetch from you and fix the conflict and let you know! (Which is what Linus would generally do)</p>

<p>One particularly useful technique to extract a good commit from a potentially set of conflicting ones is to use <code>Cherry Picking</code>. If you know the commit log&rsquo;s SHA1 then you can use that to do a cherry-pick style merge.</p>

<pre><code>$ git cherry-pick 623a3dfb5e86f4da4e043f26b6f075f6e3be77ad
</code></pre>

<h2>Working remotely </h2>

<p>The issue with git-daemon is that it is more difficult when you&rsquo;re not on the same network and masked by a bogus IP. One technique is to get the router to <a href="http://en.wikipedia.org/wiki/Network_address_translation">DNAT</a> the 9418 port. Another option is to setup a VPN. A third option is to use a bit of SSH tunneling magic to get everything to work. I&rsquo;ll cover that in a different post, perhaps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Desktop for a New Year]]></title>
    <link href="http://geekaholic.github.com/blog/2012/01/01/a-new-desktop-for-new-year/"/>
    <updated>2012-01-01T11:50:00-06:00</updated>
    <id>http://geekaholic.github.com/blog/2012/01/01/a-new-desktop-for-new-year</id>
    <content type="html"><![CDATA[<div id="slides">
  <img src="http://farm8.staticflickr.com/7011/6610804679_62d58a3e30.jpg" alt="Simple, minimilistic Mint desktop" />
  <img src="http://farm8.staticflickr.com/7142/6610808595_cce80f4911.jpg" alt="Applications list" />
  <img src="http://farm8.staticflickr.com/7034/6610807425_909f80bff3.jpg" alt="Window select" />
  <img src="http://farm8.staticflickr.com/7013/6610806003_c4c8b40cfe.jpg" alt="Global Menu" />
</div>


<p>Compared to other new years where I would spend some time cleaning up my room or <a href="http://www.geekaholic.org/2007/12/christmas-came-early-for-me-this-year.html">upgrading my gear</a>, this year I did none of that! Instead I invested some time cleaning up my online space starting with a brand new distro. I&rsquo;m a <a href="http://www.geekaholic.org/2011/08/theres-something-about-lion.html">big fan of MacOSX&rsquo;s Lion desktop</a> and wanted to bring some of that minimilistic simplicity to the Linux desktop. So if the above screenshot looks appealing, then read on to see how you too can get a modern desktop that is simple and elegant. Unlike some of my previous desktop customization article, I&rsquo;ll keep this one to the bare minimum so that you can implement it fairly quickly.</p>

<h2>Installing the base OS</h2>

<p>IMHO, Gnome 3 is the next best thing when it comes to being a modern desktop. I realize this is a controversial statement, given news of <a href="http://linux.slashdot.org/story/11/08/04/0115232/linus-torvalds-ditches-gnome-3-for-xfce">some ditching</a> and some <a href="http://www.zdnet.com/blog/open-source/linux-mints-cinnamon-a-gnome-3x-shell-fork">forking</a> the project. But IMHO when you have a project that can polarize a community that was once united, it means you&rsquo;ve got true innovation &ndash; not just incremental tweaks.</p>

<p>Having said all that, I&rsquo;ve started with Linux <a href="http://blog.linuxmint.com/?p=1889">Mint 12</a>, as the base distro to build my minimilistic desktop even though Mint has many of the traditional Windows like UI elements. Now, I&rsquo;m sure you could do this with Ubuntu 11.10, the base for Mint 12, but I like Mint due to their focus on usability where most of what I need work out of the box!</p>

<h2>Let the tweaking begin!</h2>

<p>Don&rsquo;t worry I&rsquo;ll keep it to a minimum! The first thing I did was to get rid of the bottom taskbar completely, because its soo Windows 95 like! Fortunately, Gnome 3 comes with an &ldquo;Advanced Settings App&rdquo; (<code>gnome-tweak-tool</code> in CMD line) which uses the same iPhone like on-off toggles to do the job.</p>

<p><img src="http://farm8.staticflickr.com/7160/6610969247_67299031a2_m.jpg" alt="Gnome 3 Advanced Settings App aka Gnome tweak tool" /></p>

<blockquote><p>Goto Desktop section within Advanced Settings App.</p></blockquote>

<pre><code>Have file manager handle the desktop -&gt; ON
Computer icon visible on desktop -&gt; OFF
Home icon visible on desktop -&gt; OFF
Network Servers icon visible on desktop -&gt; OFF
Trash icon visible on desktop -&gt; ON
Show mounted volumes on the desktop -&gt; ON
</code></pre>

<p>From the above list if you decide you want to see the Computer and Home icons or perhaps not have any icons then go right ahead. I have my reasons for the above :)</p>

<blockquote><p>Goto Shell section and make sure every toggle is OFF</p>

<p>Goto Shell Extensions</p></blockquote>

<p>This is where we do most of the customizations. We will come back to this but for now:</p>

<pre><code>Menu Extension -&gt; OFF
Media Player Extension -&gt; ON
Smart Overview Extension -&gt; ON
Monitor Status Extension -&gt; OFF
Bottom Panel Extension -&gt; OFF
User Themes Extension -&gt; ON
noa11y Extension -&gt; ON
Alt Tab Extension -&gt; ON
Notification Extension -&gt; ON
Shutdown Menu Extension -&gt; ON
Window List Extension -&gt; OFF
</code></pre>

<blockquote><p>Goto Theme section and select Mint-Z-Dark as the Shell theme</p></blockquote>

<h2>Installing tweaks</h2>

<p>As I&rsquo;m running this distro on a 10&#8221; netbook, I wanted all the screen real-estate I can get. Besides running apps in full screen mode is all the rage these days! The other tweak that comes from the same repository, is to overlay an icon when viewing all open windows in the <a href="http://en.wikipedia.org/wiki/Expos%C3%A9_(Mac_OS_X)">Exposé view</a>. This makes it a lot easier to figure out which window preview is for which App.</p>

<blockquote><p>Install PPA repository and plugins</p></blockquote>

<pre><code>sudo add-apt-repository ppa:webupd8team/gnome3
sudo apt-get update
sudo apt-get install gnome-shell-extensions-autohidetopbar
sudo apt-get install gnome-shell-extensions-windowoverlay-icons
</code></pre>

<p>After logging out and back logging back in (or Alt+F2 followed by r), head over to the &ldquo;Advanced Settings App&rdquo;</p>

<blockquote><p>Next to the &ldquo;Shell Extensions&rdquo; section you should find new toggles</p></blockquote>

<pre><code>Smart Overview Extension -&gt; ON
Auto Hide Top Panel Extension -&gt; ON
</code></pre>

<p>In order to get more space and simplify the window, I wanted to get rid of the menubar by integrating it as a global menubar. Unlike MacOSX&rsquo;s global menubar which is horizontal, this one is vertical and works perfectly with my limited screen width.</p>

<pre><code>sudo apt-get install gnome3-globalmenu
</code></pre>

<blockquote><p>Next I wanted get rid of the scrollbar, similar to how it is with Ubuntu. I used an updated verion of it from another PPA.</p></blockquote>

<pre><code>sudo add-apt-repository ppa:ayatana-scrollbar-team/release
sudo apt-get update
sudo apt-get install overlay-scrollbar  
</code></pre>

<p>Ok almost done. The final step I did was to install a nifty applet that is great for laptops to manage power settings and screen resolutions, especially when you want to project. It adds itself right to the top menubar for easy access.</p>

<blockquote><p>Install Jupiter</p></blockquote>

<pre><code>sudo add-apt-repository ppa:webupd8team/jupiter
sudo apt-get update
sudo apt-get install jupiter
</code></pre>

<p>And we&rsquo;re done! Enjoy your new desktop this holiday season and Happy 2012!</p>

<h2>Update (02-Jan-2012)</h2>

<p>After writing the article I wondered if it was possible to get the Window titlebar to dissapear whereby Apps can run in full screen similar to Lion. Though its not perfect, the following hacks will give you just that!</p>

<blockquote><p>Install window-buttons extension to mirror <code>minimize, maximize, close</code> buttons in the top menubar</p></blockquote>

<pre><code>sudo apt-get install gnome-shell-extension-window-buttons
</code></pre>

<p>Now enable the extension using &ldquo;Gnome Advanced Settings&rdquo; by visiting the &ldquo;Shell Extensions&rdquo; section.</p>

<pre><code>Window Buttons Extension -&gt; ON
</code></pre>

<blockquote><p>Install maximus daemon to automatically remove the title bar as a window is maximized.</p></blockquote>

<pre><code>sudo apt-get install maximus
</code></pre>

<p>Restary Gnome 3 and your set. You can restore a maximized window using the buttons in the top right corner of the top menu bar.</p>

<hr />

<h1>References</h1>

<ul>
<li><a href="http://www.webupd8.org/2011/11/autohide-top-bar-extension-finally.html">Gnome 3 auto hide top bar</a></li>
<li><a href="http://www.omgubuntu.co.uk/2011/12/ubuntus-overlay-scrollbar-gets-updated-heres-how-to-upgrade/">Ubuntu&rsquo;s Overlay Scrollbar Get Updated</a></li>
<li><a href="http://www.webupd8.org/2011/11/install-gnome-shell-global-menu-in.html">Gnome 3 global menu</a></li>
<li><a href="http://www.webupd8.org/2011/05/how-to-remove-maximized-windows.html">How to remove maximized window buttons</a></li>
<li><a href="http://www.webupd8.org/2011/05/how-to-remove-maximized-windows.html">Get Unity like window button extension</a></li>
<li><a href="http://www.webupd8.org/2011/09/jupiter-applet-finally-available-for.html">Jupiter Applet finally available for Ubuntu 11.10</a></li>
<li><a href="http://www.flickr.com/photos/babytux/tags/screenshots/">High-Res screenshots over at flickr</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Track Your New Year Resolutions With ii.do]]></title>
    <link href="http://geekaholic.github.com/blog/2011/12/31/new-year-resolution-iido/"/>
    <updated>2011-12-31T21:30:00-06:00</updated>
    <id>http://geekaholic.github.com/blog/2011/12/31/new-year-resolution-iido</id>
    <content type="html"><![CDATA[<p>I know, I know, it&rsquo;s a bit of a cheesy title to promote my Open Source project but here me out &ndash; it really does work. Though I didn&rsquo;t really write it to track my new year resolutions (I&rsquo;ve never found them effective beyond a week), I did write it out of constant frustration with not finding a TODO productivity tool that stuck with me.</p>

<p>Let me explain&hellip; I&rsquo;ve tried EVERYTHING!</p>

<ul>
<li>Google Calendar &amp; tasks</li>
<li>Sending myself Emails</li>
<li>Wiki (Dokuwiki, Mediwiki, Twiki etc.)</li>
<li>Tomboy</li>
<li>Tomboy with UbuntuOne &amp; Android App</li>
<li>EverNote</li>
<li>Remember the Milk</li>
<li>Gedit notes on my desktop</li>
<li>Post-it notes widget</li>
<li>Actual Post-it notes</li>
<li>Old-skool diary</li>
<li>Pieces of left over paper from payment receipts</li>
</ul>


<p>From the above list, if anything came remotely to sticking as a habit, then it&rsquo;d be the sticky notes &amp; pieces of paper. I&rsquo;m not suggesting the other methods suck, but I wouldn&rsquo;t use it beyond a couple of weeks.</p>

<p>Why was it that despite me spending hours on a computer, the best thing that had a chance of remotely working was old-skool pen &amp; paper? And then it hit me. A good todo App should be:</p>

<ol>
<li>In your face!</li>
<li>Really simple to use (like pen &amp; paper)</li>
<li>Did I mention in your face?</li>
</ol>


<p>Now my solution isn&rsquo;t for everyone. At this moment, it is intended ONLY for fellow geeks who spent a lot of time in the command line (GNU &amp; UNIX only), and I call it ii.do.</p>

<h2>What is ii.do</h2>

<p>ii.do, pronounced &ldquo;I do&rdquo;, but really a roman play on 2.do, is a command line todo list manager that uses a simple text file and simple <a href="http://daringfireball.net/projects/markdown/syntax">MarkDown syntax</a> to track your todo tasks. The beauty of using MarkDown syntax is in it&rsquo;s resemblance to the natural way we jolt down text on a piece of paper.</p>

<p>ii.do is optimized around querying tasks as opposed to updating tasks. For entering and updating tasks, it uses a plain old vim text editor, which has syntax highlighting for Markdown built-in. If vi is not your thing, then it&rsquo;s relatively easy to configure another editor by exporting the shell $EDITOR variable.</p>

<p>The other main design goal I had was to make it into a standalone shell script which could stand (mostly) on its own. Except for standard shell commands like sed, grep and bash itself, it doesn&rsquo;t demand much.</p>

<p>But the main power of ii.do comes ONLY (and I repeat ONLY), if you modify your shell to :</p>

<ol>
<li>Define an easy alias (such as t) which can be used to summon ii.do from anywhere within the shell</li>
<li>Modify your $PS1 shell prompt to update it with the number of pending tasks (this is the in your face bit)</li>
</ol>


<p>The second point above is <em>really important</em>, if you actually plan on using it productively, for there is nothing like an App stalking you with a reminder of how many things you have left todo.</p>

<h2>Installing ii.do</h2>

<p>You can download a tarbar ball of ii.do from <a href="https://github.com/geekaholic/ii.do/downloads">github</a>. Then just extract it to your home directory, make the shell script executable (just in case) and finally copy the sample todo.markdown to your $HOME</p>

<pre><code> $ tar zxf geekaholic-ii.do-iido-xxx.tgz
 mv geekaholic-ii.do-\* ~/ii.do
 chmod +x ~/ii.do/ii.do
 cp ~/ii.do/todo.markdown ~
</code></pre>

<p>Though ii.do is now usable, you should create an alias in order to make it more accessible and add it to ~/.bash_profile or ~/.bashrc</p>

<pre><code> echo "alias t='$HOME/ii.do'" &gt;&gt; ~/.bashrc
</code></pre>

<p>Finally the <em>most important</em> step of adding a counter to your SHELL prompt is semi-automated via ii.do!</p>

<pre><code> ~/ii.do/ii.do -S "$PS1" &gt;&gt; ~/.bashrc
</code></pre>

<p>Your all set! You might want to logout and login or do a source ~/.bashrc</p>

<p><em>Note:</em> if you would rather relocate the todo.markdown, for instance in your Dropbox folder then use the -f option.</p>

<pre><code> echo "alias t='$HOME/ii.do -f $HOME/Dropbox/todo.markdown'" &gt;&gt; ~/.bashrc
</code></pre>

<h2>Using ii.do</h2>

<p>Now the fun begins! Lets start with the most basic.</p>

<pre><code> t -h

    Version: 0.6.1

    Usage: ii.do [-f todo_file.markdown] [-T topic_number] [options]

    Options :
     -e          Open TODO file using $EDITOR
     -n          Count number of pending tasks. Can be filtered using -x, -X etc.
     -X          Filter to show only pending tasks
     -x          Filter to show only completed tasks
     -i          Filter to show only important tasks
     -t          Filter to show only topics with topic_number
     -C          Don't colorize output (useful for piping)
     -H          HTMLize the output
     -S "$PS1"   Will return modified PS1 prompt to contain pending task count
     -h          Show this help screen

    By default, we expect a ~/todo.markdown to be in your $HOME if not overridden 
    by the -f option. Refer to http://github.com/geekaholic/ii.do for examples of 
    creating this file.
</code></pre>

<hr />

<p>To edit a file using vi or $EDITOR</p>

<pre><code> t -e
</code></pre>

<p>Using markdown syntax to maintain todo.markdown is simple. You start out with a main heading called a topic.</p>

<pre><code>  # Weekly Activities
</code></pre>

<p>or using the alternate style</p>

<pre><code>Weekly Activities
=================
</code></pre>

<p>Next you start your list of tasks as a bullet <code>*</code> list</p>

<pre><code>* Come up with a BIG idea
* Implement BIG idea and be awesome
</code></pre>

<p>You could further break up your topic into subtopics as follows:</p>

<pre><code># Weekly Activities

## Entertainment

* Watch a Movie
* Go bowling

Excercise
---------

* Go to gym at least 3 days a week
* Play some wii sports
</code></pre>

<p>As you might have guessed the <code>---</code> are the alternate form for a sub level topic. This way you have have multiple top level topics followed by sublevel topics, having tasks at each level.</p>

<hr />

<p>Now we got the data entry part sorted, lets see how we can query the task list.</p>

<pre><code> t
</code></pre>

<p><img src="http://farm8.staticflickr.com/7008/6606634025_e29d008501.jpg" alt="ii.do output" /></p>

<p>Will show all your tasks using terminal colors.</p>

<hr />

<p>To filter tasks to show <code>only pending</code> or <code>only completed</code> ones:</p>

<pre><code> t -X
 t -x
</code></pre>

<p>To filter by topic, so that it only shows tasks belonging to one topic including it&rsquo;s sub topic:</p>

<pre><code>t -t

1: # Weekly Activities
2: ## Entertainment
3: ## Excercise
4: # Home Work

t -T 1
</code></pre>

<p>The above will show everything up to topic 4 (Home Work)</p>

<hr />

<p>To count the number of pending and competed tasks</p>

<pre><code> t -X -n
 t -x -n
</code></pre>

<hr />

<p>To update the task to mark it as complete, place an x in front of the task</p>

<pre><code>* x Take out the trash
</code></pre>

<p>To mark a task as important, place an <code>! mark</code> in front of it</p>

<pre><code>* ! Go to gym at least 3 days a week
</code></pre>

<p>To mark a task with a high priority, place the priority number in front of the task</p>

<pre><code>* (1) Finish history essay
</code></pre>

<hr />

<p>Finally, ii.do has two options that customize the output. The first option is to turn off color which is handy when you want to pipe the output of ii.do with more unix commands.</p>

<pre><code>t -C | grep '^*'
</code></pre>

<p>The other option is to export the todo list as html</p>

<pre><code>t -H &gt; ~/todo.html
</code></pre>

<p><img src="http://farm8.staticflickr.com/7145/6606925889_c86b0fc9a8.jpg" alt="ii.do html output" /></p>

<h2>Other Uses</h2>

<p>Besides tracking my todo list on a daily basis, I&rsquo;ve recently found another use for ii.do &ndash; track my bookmarks. I know, your probably thinking of delicious or firefox/chrome bookmark syncing but for me those solutions just don&rsquo;t cut it. For one, I use about 3 browsers and finding old bookmarks can be a real pain. So now I just use an alias with a custom bookmarks.mdown</p>

<pre><code>alias bm="$HOME/ii.do/ii.do -f $HOME/Dropbox/bookmarks.mdown"
</code></pre>

<p>Another use was to keep track of lecture topics by marking them off as I taught them over a period of two months. I also use it to keep track of some interesting quotes I come across, just for inspiration.</p>

<hr />

<h2>See also</h2>

<p>Watch a talk I gave to introduce ii.do at <a href="http://www.refreshcolombo.org">RefreshColombo</a></p>

<iframe width="300" height="315" src="http://www.youtube.com/embed/9GrFj5gUMAI" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Down With Markdown]]></title>
    <link href="http://geekaholic.github.com/blog/2011/09/02/getting-down-with-markdown/"/>
    <updated>2011-09-02T10:46:00-05:00</updated>
    <id>http://geekaholic.github.com/blog/2011/09/02/getting-down-with-markdown</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been looking for an alternative to  <a href="http://docbook.org">docbook</a>, which I&rsquo;ve used for most of my tutorial handouts and internal developer documentation at <a href="http://thinkcube.com">Thinkcube</a>. But the more I used it docbook the more I wanted a simpler solution which didn&rsquo;t require me to make sure my XML was in order.</p>

<p>Naturally, at first I thought I&rsquo;d try <a href="http://latex-project.org">Latex</a> since it had a pretty good wrap with geeks and has even <a href="http://openwetware.org/wiki/Word_vs._LaTeX">surpassed usability expectations</a> set forth by some of the mainstream wordprecessors :). What I loved about Latex was you could concentrate on the content first and formatting later. Its legendary ability to output desktop publishing quality documents and  convert to a variety of formats such as html, pdf or odt was a killer.</p>

<p>Just as I was about to dive into Latex, <a href="http://twitter.com/chanux">Chanux</a> suggested <a href="http://daringfireball.net/projects/markdown">Markdown</a> as an alternative. Hmm, Markdown, I pondered&hellip; I even liked the sound of it. It turns out Markdown is even better! You could think of it as a simplified wiki syntax but a better description would be to call it a WYSIWYG wiki syntax.</p>

<p> I&rsquo;ve always endorsed the <a href="en.wikipedia.org/wiki/KISS_principle">KISS</a> philosophy. There is nothing more simple and satisfying than to write a text file using <a href="http://vim.org">vim</a> and track its progress via <a href="http://git-scm.com">git</a>. After briefly going through the syntax, I realized this is exactly what I needed. I also realized that I had already used Markdown without actually thinking about it as part of using <a href="http://github.com">github</a> for a pet project. Everything about Markdown was all good and the whole <a href="http://www.zdnet.com/blog/violetblue/when-software-offends-the-pantyshot-package-controversy/509">controversy</a> around Markdown&rsquo;s html compiler names were exactly the kind of celebrity gossip it needed to grab attention!</p>

<p>It was around this time, I was due to create a note for a tutorial for the <a href="http://www.icter.org/UCSCConf/index.php/icter/ICTer2011/schedConf/workshops">ICTer workshop</a> myself and Dr. Ajantha from UCSC was to deliver. By now, I had decided on Markdown with <a href="https://github.com/chobie/upskirt">upskirt</a> (yes this is one of the controversal names) to create the notes but what about the slides? Could I use Markdown for that as well? After a little looking around, I found a wonderful system called <a href="https://github.com/adamzap/landslide">Landslide</a> which enabled me to compile Markdown syntax into a beautiful html5 slide show presentation. After a little playing around I managed to build slides as well as the note using a single markdown source code! How cool was that? I will write a separate post soon on the HOWTO details but for now enjoy the <a href="http://geekaholic.github.com/slides">slides</a>, if thats your cup of tea. My Markdown adventures don&rsquo;t end there. This post too was written using Markdown and converted to html using <a href="http://octopress.org">octopress</a>.</p>
]]></content>
  </entry>
  
</feed>
